// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchmark

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE44bcf2dDecodeGoJsonvalueTestBenchmarkTest(in *jlexer.Lexer, out *object) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "int":
			out.Int = int(in.Int())
		case "float":
			out.Float = float64(in.Float64())
		case "string":
			out.String = string(in.String())
		case "object":
			if in.IsNull() {
				in.Skip()
				out.Object = nil
			} else {
				if out.Object == nil {
					out.Object = new(object)
				}
				(*out.Object).UnmarshalEasyJSON(in)
			}
		case "array":
			if in.IsNull() {
				in.Skip()
				out.Array = nil
			} else {
				in.Delim('[')
				if out.Array == nil {
					if !in.IsDelim(']') {
						out.Array = make([]*object, 0, 8)
					} else {
						out.Array = []*object{}
					}
				} else {
					out.Array = (out.Array)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *object
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(object)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Array = append(out.Array, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE44bcf2dEncodeGoJsonvalueTestBenchmarkTest(out *jwriter.Writer, in object) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"int\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"float\":"
		out.RawString(prefix)
		out.Float64(float64(in.Float))
	}
	{
		const prefix string = ",\"string\":"
		out.RawString(prefix)
		out.String(string(in.String))
	}
	if in.Object != nil {
		const prefix string = ",\"object\":"
		out.RawString(prefix)
		(*in.Object).MarshalEasyJSON(out)
	}
	if len(in.Array) != 0 {
		const prefix string = ",\"array\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Array {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v object) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE44bcf2dEncodeGoJsonvalueTestBenchmarkTest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v object) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE44bcf2dEncodeGoJsonvalueTestBenchmarkTest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *object) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE44bcf2dDecodeGoJsonvalueTestBenchmarkTest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *object) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE44bcf2dDecodeGoJsonvalueTestBenchmarkTest(l, v)
}
